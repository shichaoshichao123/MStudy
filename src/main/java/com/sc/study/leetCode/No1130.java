package com.sc.study.leetCode;

/**
 * @author yingqi
 * @version 1.0
 * @date 2021/5/24 2:54 下午
 * @desc 给你一个正整数数组arr，考虑所有满足以下条件的二叉树：
 * <p>
 * 每个节点都有 0 个或是 2 个子节点。
 * 数组arr中的值与树的中序遍历中每个叶节点的值一一对应。（知识回顾：如果一个节点有 0 个子节点，那么该节点为叶节点。）
 * 每个非叶节点的值等于其左子树和右子树中叶节点的最大值的乘积。
 * 在所有这样的二叉树中，返回每个非叶节点的值的最小可能总和。这个和的值是一个32 位整数。
 */
public class No1130 {
    /**
     * 输入：arr = [6,2,4]
     * 输出：32
     * 解释：
     * 有两种可能的树，第一种的非叶节点的总和为 36，第二种非叶节点的总和为 32。
     * <p>
     * 24            24
     * /  \          /  \
     * 12   4        6    8
     * /  \               / \
     * 6    2             2   4
     * 提示：
     * 2 <= arr.length <= 40
     * 1 <= arr[i] <= 15
     * 答案保证是一个 32 位带符号整数，即小于 2^31。
     *
     * @param arr
     * @return
     */
    public int mctFromLeafValues(int[] arr) {
        if (null == arr) {
            return 0;
        }
        return 1;
    }
}
