package com.sc.study.jiuzhang.str;import java.util.ArrayList;import java.util.List;/** * @author yingqi * @date 2021/12/2 * 全排列问题 */public class Permute {    public static void main(String[] args) {        System.out.println(getPermute(new int[]{1, 2, 3}));    }    /**     * 获取指定数组的所有排列情况     *     * @param origin     * @return     */    public static List<List<Integer>> getPermute(int[] origin) {        List<List<Integer>> result = new ArrayList<>();        if (null == origin || origin.length == 0) {            return result;        }        doGetPermute(origin, new boolean[origin.length], new ArrayList<>(), result);        return result;    }    private static void doGetPermute(int[] origin,                                     boolean[] used,                                     List<Integer> sub,                                     List<List<Integer>> result) {        //出口        if (origin.length == sub.size()) {            result.add(new ArrayList<>(sub));            return;        }        //进行递归        for (int i = 0; i < origin.length; i++) {            //如果当前元素已经被用来做了排列了就跳过            if (used[i]) {                continue;            }            sub.add(origin[i]);            used[i] = true;            doGetPermute(origin, used, sub, result);            used[i] = false;            sub.remove(sub.size() - 1);        }    }}