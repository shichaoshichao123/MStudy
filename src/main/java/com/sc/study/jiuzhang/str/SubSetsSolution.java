package com.sc.study.jiuzhang.str;import java.util.ArrayList;import java.util.Arrays;import java.util.List;/** * @author yingqi * @date 2021/12/2 */public class SubSetsSolution {    public static void main(String[] args) {        System.out.println(getSubSets(new int[]{1, 2, 3}));        System.out.println(getKSum(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9}, 10, 3));    }    /**     * 获取指定数组所有可能子集(无重复元素)     *     * @param origin     * @return     */    public static List<List<Integer>> getSubSets(int[] origin) {        List<List<Integer>> result = new ArrayList<>();        if (null == origin || origin.length <= 0) {            return result;        }        Arrays.sort(origin);        //递归调用//        doGetSubSetsByDfs(origin, 0, new ArrayList<>(), result);//        doGetSubSetsByDfsV2(origin, 0, new ArrayList<>(), result);        return result;    }    /**     * dfs单元     *     * @param origin     * @param index     * @param sub     * @param result     */    private static void doGetSubSetsByDfs(int[] origin, int index, List<Integer> sub, List<List<Integer>> result) {        //递归出口        if (origin.length == index) {            //说明以及进行了一种情况的遍历了,直接将当前的sbt放入结果            result.add(new ArrayList<>(sub));            return;        }        //进行当前位置选择的递归        sub.add(origin[index]);        doGetSubSetsByDfs(origin, index + 1, sub, result);        //进行当前位置不选择的递归，注意这里要先把之前的元素进行回溯        sub.remove(sub.size() - 1);        doGetSubSetsByDfs(origin, index + 1, sub, result);    }    /**     * 另一种方式的dfs（通过回溯）     *     * @param origin     * @param index     * @param sub     * @param result     */    private static void doGetSubSetsByDfsV2(int[] origin, int index, List<Integer> sub, List<List<Integer>> result) {        //这里不需要判断直接加入        result.add(new ArrayList<>(sub));        for (int i = index; i < origin.length; i++) {            //在这里考虑以某个集合为前缀的集合            sub.add(origin[i]);            doGetSubSetsByDfsV2(origin, i + 1, sub, result);            //回溯            sub.remove(sub.size() - 1);        }    }    /**     * K sum     *     * @param origin     * @param target     * @param num     * @return     */    public static List<List<Integer>> getKSum(int[] origin, int target, int num) {        List<List<Integer>> result = new ArrayList<>();        if (null == origin || origin.length < num) {            return result;        }        Arrays.sort(origin);        doGetSum(origin, 0, num, target, new ArrayList<>(), result);        return result;    }    private static void doGetSum(int[] origin,                                 int index,                                 int k,                                 int target,                                 List<Integer> sub,                                 List<List<Integer>> result) {        if (k == 0 && target == 0) {            result.add(new ArrayList<>(sub));            return;        }        if (k == 0 || target <= 0) {            return;        }        //从指定的序号开始递归递归        for (int i = index; i < origin.length; i++) {            sub.add(origin[i]);            doGetSum(origin, i + 1, k - 1, target - origin[i], sub, result);            //回溯            sub.remove(sub.size() - 1);        }    }}