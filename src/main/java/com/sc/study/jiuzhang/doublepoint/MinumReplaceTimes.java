package com.sc.study.jiuzhang.doublepoint;import java.util.HashMap;import java.util.Map;/** * @author yingqi * @date 2021/12/11 * 最少替换次数 */public class MinumReplaceTimes {    public static void main(String[] args) {    }    public static int minumReplaceTimes(String origin, int times) {        if (null == origin) {            return 0;        }        //maxFreq 表示当前子串重复数最多的元素个数        int j = 0, result = 0, maxFreq = 0, count;        Map<Character, Integer> counterMap = new HashMap<>();        for (int i = 0; i < origin.length(); i++) {            while (j < origin.length() && j - i - maxFreq <= times) {                count = counterMap.getOrDefault(origin.charAt(j), 0) + 1;                counterMap.put(origin.charAt(j), count);                maxFreq = Math.max(maxFreq, count);                j++;            }            if (j - i - maxFreq > times) {                result = Math.max(result, j - i - 1);            } else {                result = Math.max(result, j - i);            }            count = counterMap.get(origin.charAt(i)) - 1;            counterMap.put(origin.charAt(i), count);            maxFreq = getMaxCounter(counterMap);        }        return result;    }    private static int getMaxCounter(Map<Character, Integer> counterMap) {        //todo        return -1;    }}