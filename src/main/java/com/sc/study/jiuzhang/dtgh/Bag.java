package com.sc.study.jiuzhang.dtgh;/** * @author yingqi * @date 2021/12/11 */public class Bag {    public static void main(String[] args) {        int[] origin = new int[]{1, 3, 5, 7, 9};        System.out.println(getNearSum(origin, 10));    }    /**     * 求出通过给出的数组组合最接近目标值的和（小于等于）     *     * @param origin     * @param target     * @return     */    private static int getNearSum(int[] origin, int target) {        if (null == origin || origin.length <= 0) {            return 0;        }        //这个状态方程表示前i个数组能组成小于等于j的最大值        int[][] dp = new int[origin.length + 1][target + 1];        for (int i = 1; i <= origin.length; i++) {            for (int j = 0; j <= target; j++) {                if (j < origin[i - 1]) {                    dp[i][j] = dp[i - 1][j];                } else {                    dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - origin[i - 1]] + origin[i - 1]);                }            }        }        return dp[origin.length][target];    }}